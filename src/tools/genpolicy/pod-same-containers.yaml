---
apiVersion: v1
kind: Pod
metadata:
  name: three-containers
  labels:
    run: busybox
  annotations:
    io.katacontainers.config.agent.policyOption.execCommands: W3siY29udGFpbmVyTmFtZSI6ImJ1c3lib3gyIiwiZXhlY0NvbW1hbmRzIjpbImRoIC1oIiwicHMgLWVmIl19LCB7ImNvbnRhaW5lck5hbWUiOiJidXN5Ym94MyIsImV4ZWNDb21tYW5kcyI6WyJscyJdfV0=
    io.katacontainers.config.agent.policy: 
spec:
  restartPolicy: Never
  runtimeClassName: kata-cc
  containers:
    - name: busybox1
      image: "mcr.microsoft.com/aks/e2e/library-busybox:master.220314.1-linux-amd64"
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
      securityContext:
        privileged: true
      command:
        - /bin/sh
      args:
        - "-c"
        - while true; do echo hello; sleep 10; done
    - name: busybox2
      image: "mcr.microsoft.com/aks/e2e/library-busybox:master.220314.1-linux-amd64"
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
      securityContext:
        privileged: true
      command:
        - /bin/sh
      args:
        - "-c"
        - while true; do echo hello; sleep 10; done
    - name: busybox3
      image: "mcr.microsoft.com/aks/e2e/library-busybox:master.220314.1-linux-amd64"
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
      securityContext:
        privileged: true
      command:
        - /bin/sh
      args:
        - "-c"
        - while true; do echo hello; sleep 10; done
